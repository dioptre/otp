%% -*- erlang-indent-level: 2 -*-

%%% @copyright 2011-2012 Yiannis Tsiouris <yiannis.tsiouris@gmail.com>,
%%%                      Chris Stavrakakis <hydralisk.r@gmail.com>
%%% @version {@version}
%%% @author Yiannis Tsiouris <yiannis.tsiouris@gmail.com>

%%% @doc This header file contains useful macros and aliases for manipulating
%%%      a custom Note Section with information about Garbage Collection that
%%%      is generated by LLVM ErlangGC plugin and used in HiPE's LLVM backend
%%%      in Erlang/OTP system. The custom section is a stack descriptor that
%%%      contains information about safepoints and live roots in the code. For
%%%      more information about the structure of the section please see the
%%%      documentation in note_erlgc.erl file. This file can be used as an
%%%      example for writing a custom section parser based on elf64_format
%%%      library. :-)

%%------------------------------------------------------------------------------
%%
%%                     Elf Note Section for Erlang GC
%%
%%------------------------------------------------------------------------------

-include("elf64_format.hrl").
-include("elf_format.hrl").

%% The name of the custom Note Section
-define(NOTE_ERLGC_NAME, "gc").

%% The first word of a Note Section for Erlang GC (".note.gc") is always the
%% number of safepoints in code.
-define(SP_COUNT, {?SP_COUNT_OFFSET, ?SP_COUNT_SIZE}).
-define(SP_COUNT_SIZE,   ?ELF_WORD_SIZE).
-define(SP_COUNT_OFFSET, 0).                %(always the first entry in sdesc)

%% The fixed-size part of a safe point (SP) entry consists of 4 words: the SP
%% address (offset in code), the stack frame size of the function (where the SP
%% is located), the stack arity of the function (the registered values are *not*
%% counted), the number of live roots in the specific SP.
-define(SP_FIXED, {?SP_FIXED_OFF, ?SP_FIXED_SIZE}).
-define(SP_FIXED_OFF, 0).
-define(SP_FIXED_SIZE, (?SP_ADDR_SIZE + ?SP_STKFRAME_SIZE + ?SP_STKARITY_SIZE
			 + ?SP_LIVEROOTCNT_SIZE)).

-define(SP_ADDR_SIZE,        ?ELF_WORD_SIZE).
-define(SP_STKFRAME_SIZE,    ?ELF_WORD_SIZE).
-define(SP_STKARITY_SIZE,    ?ELF_WORD_SIZE).
-define(SP_LIVEROOTCNT_SIZE, ?ELF_WORD_SIZE).

-define(SP_ADDR_OFFSET,        0).
-define(SP_STKFRAME_OFFSET,    (?SP_ADDR_OFFSET + ?SP_ADDR_SIZE) ).
-define(SP_STKARITY_OFFSET,    (?SP_STKFRAME_OFFSET + ?SP_STKFRAME_SIZE) ).
-define(SP_LIVEROOTCNT_OFFSET, (?SP_STKARITY_OFFSET + ?SP_STKARITY_SIZE) ).

%% Name aliases for safepoint fields.
-define(SP_ADDR,        {?SP_ADDR_OFFSET, ?SP_ADDR_SIZE}).
-define(SP_STKFRAME,    {?SP_STKFRAME_OFFSET, ?SP_STKFRAME_SIZE}).
-define(SP_STKARITY,    {?SP_STKARITY_OFFSET, ?SP_STKARITY_SIZE}).
-define(SP_LIVEROOTCNT, {?SP_LIVEROOTCNT_OFFSET, ?SP_LIVEROOTCNT_SIZE}).

%% After the fixed-size part a variable-size part exists. This part holds the
%% stack frame index of every live root in the specific SP.
-define(LR_STKINDEX_SIZE, ?ELF_WORD_SIZE).
